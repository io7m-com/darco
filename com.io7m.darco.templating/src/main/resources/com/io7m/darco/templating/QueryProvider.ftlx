[#ftl output_format="plainText"]
${copyrightText}

package ${packageName};

import com.io7m.darco.api.DDatabaseQueryProviderType;
import com.io7m.darco.api.DDatabaseQueryType;

import com.io7m.darco.api.DDatabaseQueryProviderAbstract;
import com.io7m.darco.api.DDatabaseQueryType;

import java.util.function.Function;

/**
 * A query provider.
 */

final class ${queryProvider}<P, R, Q extends DDatabaseQueryType<P, R>>
  extends DDatabaseQueryProviderAbstract<${transactionType}, P, R, Q>
  implements ${queryProviderType}<P, R, Q>
{
  private ${queryProvider}(
    final Class<? extends Q> inQueryClass,
    final Function<${transactionType}, DDatabaseQueryType<P, R>> inConstructor)
  {
    super(inQueryClass, inConstructor);
  }

  static <P, R, Q extends DDatabaseQueryType<P, R>>
  ${queryProviderType}<P, R, Q>
  provide(
    final Class<? extends Q> inQueryClass,
    final Function<${transactionType}, DDatabaseQueryType<P, R>> inConstructor)
  {
    return new ${queryProvider}<>(inQueryClass, inConstructor);
  }
}
